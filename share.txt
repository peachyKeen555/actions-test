const { spawn } = require('child_process');

function executeCommand(command, args) {
  return new Promise((resolve, reject) => {
    const child = spawn(command, args);
    child.stdout.on('data', (data) => {
      process.stdout.write(data);
    });
    child.stderr.on('data', (data) => {
      process.stderr.write(data);
    });
    child.on('close', (code) => {
      if (code === 0) {
        resolve();
      } else {
        reject(new Error(`Command exited with code ${code}`));
      }
    });
  });
}


#!/bin/bash

# Configure old and new registry URLs
OLD_REGISTRY_URL="https://old-registry.example.com"
NEW_REGISTRY_URL="https://new-registry.example.com"

# Path to your packages list
PACKAGES_LIST="packages.txt"

# Login to the old registry (if required)
# npm login --registry=$OLD_REGISTRY_URL

# Loop through the packages list
while IFS= read -r package
do
    echo "Processing $package..."

    # Pack the package from the old registry
    npm pack "$package" --registry=$OLD_REGISTRY_URL

    # Extract package name and version for filename
    PACKAGE_TAR=$(echo $package | tr '@' ' ' | awk '{print $2"-"$3".tgz"}')

    # Publish to the new registry
    npm publish $PACKAGE_TAR --registry=$NEW_REGISTRY_URL

    # Optionally, remove the tarball after publishing
    rm $PACKAGE_TAR

done < "$PACKAGES_LIST"
